#!/usr/bin/env python3

from math import sqrt
import argparse
import pandas as pd

#from meltingShiftPy.plot import plot_qs7, plot_cfx
from meltingShiftPy.plot import *

def main(args):
    # Read in data
    df = pd.read_csv(args.input).set_index("Temperature")

    ## Check which thermocycler
    if args.thermocycler == "gs7":
        ## Grab only Flourescence of Samples
        only_flour_df = pd.DataFrame(index=df.index)
        for col in df:
            column = col.split("_")
            if  column[0] in ["Flourescence"]:
                only_flour_df[col] = df[col]
        # Grab control column by given index
        control = only_flour_df.iloc[:, int(args.index)]
        only_flour_df = only_flour_df.drop(columns=control.name)
        # Count number of columns (samples)
        axis_spec = round(sqrt(len(only_flour_df.columns)))
        # Call plotting function
        plot_qs7(only_flour_df, control, axis_spec, args.color)

    elif args.thermocycler == "cfx":
        print("Plotting CFX results")
        # Grab Control
        control = df.iloc[:, int(args.index)]
        # Drop control column
        df = df.drop(columns=control.name)
        if args.grid:
            # Call plot function
            plot_cfx_onegrid(df, control, axis_spec=round(sqrt(len(df.columns))), color=args.color, output=args.output)
        # Call plot function
        plot_cfx(df, control, color=args.color, output=args.output)


if __name__ == "__main__":

    """ Parse command line arguments """
    parser = argparse.ArgumentParser()
    
    parser.add_argument(
        "-i", "--input", help=" file or directory of csv files after running analyze script", required=True
    )
    parser.add_argument(
        "--color", help="color for melting curve"
    )
    parser.add_argument(
        "--index", help="index for control column", required=True
    )
    parser.add_argument(
        "-o", "--output", help="name for file output", required=True
    )

    parser.add_argument(
       "-t", "--thermocycler", help="name of thermocycler machine", required=True
    )

    parser.add_argument(
        "--grid", help="Plot graphs in single grid", action="store_true"
    )
    main(parser.parse_args())
