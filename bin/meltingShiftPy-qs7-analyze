#!/usr/bin/env python3

import argparse
import pandas as pd
import sys
import os

from meltingShiftPy.format import format_df 
from meltingShiftPy.utils import write_output
from meltingShiftPy.averages import qs7_averages, get_tm

def main(args):
    # Initialize DataFrame object
    df = pd.DataFrame()
    try:
        if args.sheet:
            df = pd.read_excel(args.input, sheet_name=args.sheet)
        else:
            df = pd.read_csv(args.input)
    except Exception as e:
        print(f"Exception thrown: {str(e)}")

    # Format DataFrame
    df = format_df(df)
    # Calculate average
    (f_df, d_df) = qs7_averages(df)
    # Calculate melting temperature
    tm_df = get_tm(f_df, args.index)
    # Write to output, TODO: Change to only one output for f_df and d_df.
    write_output(f_df, args.output, "_fluorescence")
    write_output(d_df, args.output, "_derivative")
    write_output(tm_df, args.output, "_results")
    
    return
    
    
if __name__ == "__main__":

    """ Parse command line arguments """
    parser = argparse.ArgumentParser()
    
    parser.add_argument(
        "-i", "--input", help="input excel or csv file with raw data", required=True
    )
    parser.add_argument(
        "--sheet", help="if excel, need sheet name"
    )
    parser.add_argument(
        "-o", "--output", help="name for file output", required=True
    )
    parser.add_argument(
        "--index", help="index for control column", required=True, type=int
    )
    
    main(parser.parse_args())
